#!/bin/bash

declare in_gha=false

if [[ ${1} == --github-action ]]; then
	in_gha=true
	shift
fi

die() {
	printf "ERROR: %s\n" "$@"
	exit 1
}

if ! git diff --quiet; then
	die "please commit or stash your existing changes before running this script"
fi

golang_show_dl_urls() {
	curl -sS https://go.dev/dl/ |
		grep 'class="download"' |
		sed -r -e 's/^.*href="(.*)">.*$/https:\/\/go.dev\1/' |
		sort -V
}

golang_show_dl_versions() {
	# starting with version 1.21 the first version is now 1.21.0
	golang_show_dl_urls |
		sed -r -e 's:^.*/go(.*)[.](zip|msi|tar.gz|pkg)$:\1:' |
		grep '[..]src$' |
		sed -r -e 's:[.]src::g' |
		grep -v -E '(beta|rc)' |
		grep -E '^[0-9]+[.][0-9]+[.][0-9]+$' |
		sort -V
}

golang_get_latest_version_full() {
	git -c 'versionsort.suffi=-' ls-remote --tags --sort='v:refname' https://go.googlesource.com/go 'go*.*.*' |
		tail --lines=1 |
		cut --delimiter='/' --fields=3 |
		sed -r -e 's/^.[a-z]+([0-9]+\.[0-9]+\.[0-9]+).*$/\1/g'
}

golang_get_latest_version_family() {
	git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://go.googlesource.com/go 'go*.*.*' |
		tail --lines=1 |
		cut --delimiter='/' --fields=3 |
		sed -r -e 's/^.[a-z]+([0-9]+\.[0-9]+).*$/\1/g'
}

golang_show_dl_patch_versions() {
	golang_show_dl_urls |
		sed -r -e 's:^.*/go(.*)[.](zip|msi|tar.gz|pkg)$:\1:' |
		grep '[..]src$' |
		sed -r -e 's:[.]src::g' |
		grep -v -E '(beta|rc)' |
		grep -E '^[0-9]+[.][0-9]+[.][0-9]+$' |
		sort -V
}

declare -a FILES
declare old_go_ver
declare new_go_ver
declare new_go_ver_full
declare current_branch

old_go_ver="$(awk '/^go / { print $NF }' go.mod)"

# starting with version 1.21 the first version is now 1.21.0
new_go_ver="$(golang_get_latest_version_family)"

new_go_ver_full="$(golang_get_latest_version_full)"

if [[ ${old_go_ver} == "${new_go_ver}" ]]; then
	printf "Golang version, %s, is already up to date.\n" "${old_go_ver}"
	exit # 0 exit code since this isn't a workflow error condition
fi

# starting with version 1.21 the first version is now 1.21.0
# looking for micro/patch versions starting at 1 (don't trust .0 releases, I can wait for the >=.1 release)
if [[ ! ${new_go_ver_full} =~ ^${new_go_ver}.[1-9]+$ ]]; then
	printf "Golang version >%s not found. Skipping update.\n" "${new_go_ver}.0"
	exit # 0 exit code since this isn't a workflow error condition
fi

mapfile -t FILES < <(git grep --name-only "\b${old_go_ver}\b" | grep -E '\bgo\.(mod|work)$')

sed -r -i -e "s/${old_go_ver}(\.[0-9]+)?/${new_go_ver}/g" "${FILES[@]}" || die "failed to change the golang version"

if ! git diff --quiet; then
	git status
	printf "\n"

	git diff
	printf "\n"

	if ! ${in_gha}; then
		git add --update . || die "failed to stage the script's changes"

		git commit -S -m "build(go): bump golang version from ${old_go_ver} to ${new_go_ver}" || die "failed to create a golang version bump commit"

		current_branch="$(git branch --show-current)"

		git push origin "${current_branch}" || die "failed to push the commit to 'origin ${current_branch}'"

		printf "\n"
		git show
	fi
fi
