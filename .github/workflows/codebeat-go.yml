---
#
# .github/workflows/codebeat-go.yml
#
name: Codebeat Go Workflow
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
      - develop
  pull_request:

env:
  CODECLIMATE_API_HOST: "https://codebeat.co/webhooks/code_coverage"
  CODECLIMATE_REPO_TOKEN: ${{ secrets.CODEBEAT_PROJECT_UUID }}
  GH_REPO_URL: github.com/vpayno/powerful-cli-apps-in-go-workspace
  REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

defaults:
  run:
    shell: bash

jobs:
  go-change-check:
    name: Change Check
    runs-on: 'ubuntu-latest'
    outputs:
      docs_changed: ${{ steps.check_file_changed.outputs.docs_changed }}
    steps:
      - name: Checkout Repo
        id: checkout-repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          submodules: recursive
      - name: Get Change List
        id: check_file_changed
        run: |
          # Diff HEAD with the previous commit then output to stdout.
          printf "=== Which files changed? ===\n"
          GIT_DIFF="$(git diff --name-only HEAD^ HEAD)"
          printf "%s\n" "${GIT_DIFF}"
          printf "\n"

          # Check if the files are present in the changed file list (added, modified, deleted) then output to stdout.
          HAS_DIFF=false
          printf "=== Which Golang files changed? ===\n"
          if printf "%s\n" "${GIT_DIFF}" | grep -E '^(.*[.]go|go[.](mod|sum)|.github/workflows/codebeat-go.yml)$'; then
            HAS_DIFF=true
          fi
          printf "\n"

          # Did Golang files change?
          printf "=== Did Golang files change? ===\n"
          printf "%s\n" "${HAS_DIFF}"
          printf "\n"

          # Set the output named "docs_changed"
          printf "%s=%s\n" "docs_changed" "${HAS_DIFF}" >> "${GITHUB_OUTPUT}"
  go_checks:
    name: Go Checks
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    runs-on: "${{ matrix.os }}"
    needs:
      - go-change-check
    if: needs.go-change-check.outputs.docs_changed == 'True'
    steps:
      - name: Checkout Repo
        id: checkout-repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          submodules: recursive
      - name: Install Node
        id: install-node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Check Node Version
        id: npm-version-check
        run: |
          npm --version
      - name: Set up Go (using version in go.mod)
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
      - name: Show Go version
        id: go-version
        run: |
          go version
      - name: Run go generate
        id: go-generate
        run: |
          go generate ./...
      - name: Testing with gotest
        id: go-test-run
        run: |
          go install github.com/rakyll/gotest@latest
          go install golang.org/x/tools/cmd/cover@latest
          gotest -v -covermode=count -coverprofile=./reports/.coverage.out ./...
      - name: Generate coverage.xml
        id: go-generate-coverage-xml
        run: |
          go install github.com/t-yuki/gocover-cobertura@latest
          gocover-cobertura < ./reports/.coverage.out > ./reports/coverage.xml
          wc ./reports/coverage.xml
      - name: Test Coverage Report (txt)
        id: go-test-coverage-txt
        run: |
          go tool cover -func=./reports/.coverage.out | tee reports/coverage.txt
      - name: Show Missing Coverage
        id: go-test-coverage-annotate
        run: |
          go install github.com/axw/gocov/gocov@latest
          gocov convert ./reports/.coverage.out | gocov annotate -ceiling=100 -color - | tee reports/coverage-annotations.txt
      - name: gocov Coverage Report
        id: go-test-coverage-report
        run: |
          gocov convert ./reports/.coverage.out | gocov report | tee reports/coverage-summary.txt
      - name: Codebeat Code Coverage Report
        id: go-codebeat-code-coverage-report
        run: |
          npm install -g codeclimate-test-reporter
          printf "\n"
          printf "Version: "
          codeclimate-test-reporter --version
          printf "\n"
          codeclimate-test-reporter < ./reports/.coverage.out
      - name: Action Summary
        id: gh-action-summary
        run: |-
          {
            printf "### Code Coverage Summary\n\n"
            printf '```\n'
            cat reports/coverage-summary.txt
            printf '```\n'
            printf "\n"
          } >> "${GITHUB_STEP_SUMMARY}"
          {
            printf "### Code Coverage Annotations\n\n"
            printf '```\n'
            cat reports/coverage-annotations.txt
            printf '```\n'
            printf "\n"
          } >> "${GITHUB_STEP_SUMMARY}"
